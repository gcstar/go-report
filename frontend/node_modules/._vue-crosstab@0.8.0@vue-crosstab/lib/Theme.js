'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var colors = {
  'Deep Purple': '#4527A0',
  Indigo: '#283593',
  Pink: '#AD1457',
  Teal: '#00695C',
  Vue: '#41b883',
  'Steel Blue': '#4682b4',
  'Light Blue': '#0277BD',
  Blue: '#1565C0'
};

exports.default = function (_ref) {
  var name = _ref.name,
      baseColor = _ref.baseColor,
      valueColor = _ref.valueColor;

  valueColor = valueColor || '#09622a';

  var hslValueColor = hexToHsl(valueColor);
  var hslColor = hexToHsl(name ? colors[name] : baseColor);
  var palette = [];
  var step = 3;

  for (var i = 0; i < 10; i++) {
    var color = 'hsl(' + hslColor[0] + ', ' + hslColor[1] + '%, ' + (hslColor[2] + i * step) + '%)';
    palette.push(color);
  }

  return {
    palette: palette,
    headerText: '#FFFFFF',
    headerBorder: palette[0],
    cornerBorder: palette[1],
    bodyText: '#666666',
    bodyBorder: '#DADADA',
    bodyPrimary: '#FFFFFF',
    bodySecondary: '#F2F2F2',
    valueToColor: function valueToColor(value, maxValue) {
      var valuePercent = value / maxValue;
      var color = 'hsl(' + hslValueColor[0] + ', ' + hslValueColor[1] + '%, ' + Math.round(70 - 50 * valuePercent) + '%)';

      return color;
    }
  };
};

function hexToRgb(hex) {
  if (hex.charAt && hex.charAt(0) === '#') {
    hex = removeHash(hex);
  }

  if (hex.length === 3) {
    hex = expand(hex);
  }

  var bigint = parseInt(hex, 16);
  var r = bigint >> 16 & 255;
  var g = bigint >> 8 & 255;
  var b = bigint & 255;

  return [r, g, b];
}

function removeHash(hex) {
  var arr = hex.split('');
  arr.shift();
  return arr.join('');
}

function expand(hex) {
  return hex.split('').reduce(function (accum, value) {
    return accum.concat([value, value]);
  }, []).join('');
}

function hexToHsl(hex) {
  var hsl = rgbToHsl.apply(rgbToHsl, hexToRgb(hex));
  return [hsl[0], parseInt(hsl[1], 10), parseInt(hsl[2], 10)];
}

function rgbToHsl(r, g, b) {
  var d = void 0,
      h = void 0,
      l = void 0,
      max = void 0,
      min = void 0,
      s = void 0;
  r /= 255;
  g /= 255;
  b /= 255;
  max = Math.max(r, g, b);
  min = Math.min(r, g, b);
  h = 0;
  s = 0;
  l = (max + min) / 2;
  if (max === min) {
    h = s = 0;
  } else {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
    }
    h /= 6;
  }
  h = Math.ceil(h * 360);
  s = Math.ceil(s * 100) + '%';
  l = Math.ceil(l * 100) + '%';
  return [h, s, l];
}